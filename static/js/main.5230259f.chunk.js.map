{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/app.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","id","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5230259f.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css'; \n\nclass Business extends React.Component {\n    render() {\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc}/>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating} stars</h3>\n                        <p>{this.props.business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {\n                this.props.businesses.map(\n                    (business) => {\n                        return <Business \n                        key={business.id}\n                        business={business}/>;\n                    }\n                )\n                }\n            </div>\n    )\n    }\n};\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '', \n            sortBy:  'best_match'\n        };\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.sortByOptions = {\n            \"Best Match\": 'best_match',\n            \"Highest Rated\": 'rating',\n            \"Most Reviewed\": 'review_count'\n        };\n    }\n\n    getSortByClass(sortByOption) {\n        if (this.state.sortBy === sortByOption) {\n            return 'active';\n        } else {\n            return '';\n    }};\n\n    //BIG SCARY COMMENT I DON'T KNOW WHY THIS WORKS\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        })\n    };\n\n    handleTermChange(event) {\n        this.setState({\n            term: event.target.value\n        })\n    };\n\n    handleLocationChange(event) {\n        this.setState({\n            location: event.target.value\n        })\n    };\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input \n                    onChange={this.handleTermChange}\n                    placeholder=\"Search Businesses\" />\n                    <input \n                    onChange={this.handleLocationChange}\n                    placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}\n                    >Let's Go</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","const apiKey = \"ieyUgHcm5HFeJuJChYyt9-SHiue0S1S7one6WgCmA-JHZvCstn6dxXny8nuznNzM_I-pUJ5zBUIRuNeUPeDfuuQ0kEsKb4L4g4ecq4K7tdm_BPMuNbkKCeuQLNc-X3Yx\";\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(\n            `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                }\n            }).then((response) => {\n                return response.json();\n            })\n            .then((jsonResponse) => {\n                if (jsonResponse.businesses) {\n                    return jsonResponse.businesses.map(business => {\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zip_code,\n                            category: business.categories[0].title,\n                            rating: business.rating, \n                            reviewCount: business.review_count\n                        };\n                    });\n                }\n            }); \n    }\n};\n\nexport default Yelp; ","import React from 'react';\nimport './app.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\n// const business = {\n//   imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n//   name: 'MarginOtto Pizzeria',\n//   address: '1010 Paddington Way',\n//   city: 'Flavortown',\n//   state: 'NY',\n//   zipCode: '10101',\n//   category: 'Italian',\n//   rating: 4.5,\n//   reviewCount: 90\n// };\n\n// const businesses = [\n//   business,\n//   business,\n//   business,\n//   business,\n//   business,\n//   business\n// ];\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy)\n    .then(businesses => {\n      this.setState({\n        businesses: businesses\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses}/>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}